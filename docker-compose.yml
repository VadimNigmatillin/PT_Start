services:
  bot:
    container_name: bot
    build:
      context: ./bot
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      TOKEN: ${TOKEN}
      RMHOST: ${RMHOST}
      RMPORT: ${RMPORT}
      RMUSER: ${RMUSER}
      RMPASSWORD: ${RMPASSWORD}
      DBHOST: ${DBHOST}
      DBPORT: ${DBPORT}
      DBUSER: ${DBUSER}
      DBPASSWORD: ${DBPASSWORD}
      DBDATABASE: ${DBDATABASE}
      
    image: bot_image
  db:
    container_name: db
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        REPLUSER: ${DBREPLUSER}
        REPLPASSWORD: ${DBREPLPASSWORD}
        DATABASE: ${DBDATABASE}
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DBUSER}
      POSTGRES_PASSWORD: ${DBPASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c hot_standby=on
      -c max_wal_senders=10
      -c wal_level=replica
      -c wal_log_hints=on
      -c hot_standby_feedback=on
      -c max_replication_slots=10
      -c logging_collector=on
      -c max_connections=100
      -c log_replication_commands=on
    image: db_image
  db_repl:
      container_name: db_repl
      build:
        context: ./db_repl
        dockerfile: Dockerfile
      env_file:
      - .env
      environment:
        PGUSER: ${DBUSER}
        POSTGRES_PASSWORD: ${DBPASSWORD}
        PGPASSWORD: ${DBREPLPASSWORD}
      command: |
        bash -c "
        rm -rf /var/lib/postgresql/data/*
        until pg_basebackup -h db -D /var/lib/postgresql/data -U ${DBREPLUSER} -vP -w;
        do
        echo 'Connect...'
        sleep 1s
        done
        echo 'Starting replica...'
        chown -R postgres:postgres /var/lib/postgresql/data
        chmod 0700 /var/lib/postgresql/data
        su - postgres -c '/usr/lib/postgresql/16/bin/postgres -D /var/lib/postgresql/data'
        "
      image: db_repl_image
